let mapleader = " "   " Spacebar

set autoindent
set autowrite         " Automatically :write before running commands
set backspace=2       " Backspace deletes like most programs in insert mode
set colorcolumn=+1
set complete+=kspell  " Include spellfile in completion results
set diffopt+=vertical " Always use vertical diffs
set encoding=utf-8
set expandtab
set exrc              " http://andrew.stwrt.ca/posts/project-specific-vimrc/
set history=50
set incsearch
set laststatus=2      " Always display status line
set list listchars=tab:»·,trail:·,nbsp:·
set modelines=0       " Disable modelines as a security precaution
set nobackup
set nojoinspaces      " Use one space, not two, after punctuation
set nomodeline        " Disable modelines as a security precaution
set noswapfile
set nowritebackup
set number
set numberwidth=5
set ruler             " Ahow cursor position all the time
set shiftround
set shiftwidth=2
set showcmd           " Display incomplete commands
set splitbelow
set splitright
set tabstop=2
set textwidth=80

if &compatible
  set nocompatible
end

" Open vim-plug without a vertical split
let g:plug_window='enew'

call plug#begin('~/.vim/plugged')
  Plug '/usr/local/opt/fzf' " binary installed via Homebrew
  Plug 'junegunn/fzf.vim'   " plugin to add :Files and :Ag commands

  Plug 'AndrewRadev/splitjoin.vim'
  Plug 'dense-analysis/ale'
  Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
  Plug 'janko-m/vim-test'
  Plug 'junegunn/vim-easy-align'
  Plug 'leafgarland/typescript-vim'
  Plug 'mxw/vim-jsx'
  Plug 'nicholaides/words-to-avoid.vim'
  Plug 'pangloss/vim-javascript'
  Plug 'pbrisbin/vim-mkdir'
  Plug 'tomtom/tcomment_vim'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-rails'
  Plug 'vim-ruby/vim-ruby'
call plug#end()

" When reading a buffer, jump to last known cursor position except for
" commit messages, when position is invalid, or inside an event handler.
augroup lastcursorposition
  autocmd!

  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

" Lint
augroup ale
  autocmd!

  autocmd VimEnter *
    \ set updatetime=1000 |
    \ let g:ale_lint_on_enter = 1 |
    \ let g:ale_lint_on_text_changed = 0
augroup END

" Tab complete
let g:ale_completion_enabled = 1 " :help ale-completion
function! InsertTabWrapper()      " tab at start of line, otherwise completion
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<Tab>"
  else
    return "\<C-p>"
  endif
endfunction
inoremap <Tab> <C-r>=InsertTabWrapper()<CR>
inoremap <S-Tab> <C-n>
set wildmode=list:longest,list:full

" Fuzzy-find files
nmap <C-p> :Files<CR>

" Search file contents
nmap \ :Ag<SPACE>
set grepprg=ag\ --nogroup\ --nocolor

" Find references for word under cursor.
" Override with Language Server Protocol for supported file types.
noremap <buffer> <silent> fr :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Switch between the last two files
nnoremap <leader><leader> <C-^>

" Run tests
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>

" Test && Commit || Revert
nnoremap <silent> <Leader>c :!clear && tcr<CR>

" Move between windows
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Colors
hi clear
if version > 580
  if exists("syntax_on")
    syntax reset
  endif
endif

" Show syntax groups under cursor
map <silent> zs :for id in synstack(line("."), col("."))<bar>
  \ echo synIDattr(id, "name").' '<bar> execute 'echohl' synIDattr(synIDtrans(id), "name") <bar> echon synIDattr(synIDtrans(id), "name") <bar> echohl None <bar>
  \ endfor<CR>

if system("defaults read -g AppleInterfaceStyle") =~ '^Dark'
  colorscheme dark
else
  colorscheme light
endif

" Disable spelling by default, enable per-filetype
autocmd BufRead setlocal nospell
